# -*- coding: utf-8 -*-
"""usa_cars_spalanie_regresja_extended.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1k-z32CX-2yrCN_in_zrsnEq22OlJJ6XS
"""

import numpy as np
import pandas as pd
import seaborn as sns
np.set_printoptions(precision=3,suppress=True)

import tensorflow as tf

from tensorflow import keras
from tensorflow.keras import layers

url = "https://archive.ics.uci.edu/ml/machine-learning-databases/auto-mpg/auto-mpg.data"
column_names = ['MPG','Cylinders','Displacement','Horsepower','Weight','Acceleration','Model Year','Origin']

raw_dataset = pd.read_csv(url,names=column_names,na_values='?',comment='\t',sep=' ',skipinitialspace=True)

dataset = raw_dataset.copy()
dataset.tail()

dataset.isna().sum()

dataset = dataset.dropna()

dataset.isna().sum()

dataset['Origin'] = dataset['Origin'].map({1:'USA',2:'Europe',3:'Japan'})

dataset = pd.get_dummies(dataset,columns=['Origin'],prefix='',prefix_sep='')
dataset.tail(20)

dataset.tail(20)

train_dataset = dataset.sample(frac=0.8,random_state=0)
test_dataset = dataset.drop(train_dataset.index)

sns.pairplot(train_dataset[['MPG','Cylinders','Displacement','Weight']],diag_kind='kde')

train_dataset.describe().transpose()

train_features = train_dataset.copy()
test_features = test_dataset.copy()

train_labels = train_features.pop('MPG')
test_labels = test_features.pop('MPG')

train_dataset.describe().transpose()[['mean','std']]

normalizer = tf.keras.layers.Normalization(axis=-1)

normalizer.adapt(np.array(train_features))

print(normalizer.mean.numpy())

first = np.array(train_features[:1])

first = first.astype(np.float32)
with np.printoptions(precision=2,suppress=True):
    print(f'pierwszy przypadek: {first}')
    print(f'po normalizacji: {normalizer(first).numpy()}')

#regresja liniowa z jedną zmienną
#y = ax+b

horsepower = np.array(train_features['Horsepower'])
horsepower_normalizer = layers.Normalization(input_shape=[1,],axis=None)
horsepower_normalizer.adapt(horsepower)

horsepower_model = tf.keras.Sequential([
    horsepower_normalizer,
    layers.Dense(units=1)
])

horsepower_model.summary()

horsepower_model.predict(horsepower[:10])

horsepower_model.compile(
    optimizer=tf.optimizers.Adam(learning_rate=0.1),
    loss='mean_absolute_error'
)

# Commented out IPython magic to ensure Python compatibility.
# %%time
# history = horsepower_model.fit(
#     train_features['Horsepower'],
#     train_labels,
#     epochs=100,
#     verbose=0,
#     validation_split=0.2
# )

hist = pd.DataFrame(history.history)
hist['epoch'] = history.epoch
hist.tail()

import matplotlib.pyplot as plt

def plot_loss(history):
    plt.plot(history.history['loss'],label='loss')
    plt.plot(history.history['val_loss'],label='val_loss')
    plt.ylim([0,10])
    plt.xlabel('Epoch')
    plt.ylabel('Error[MPG]')
    plt.legend()
    plt.grid(True)

plot_loss(history)

test_result = {}
test_result['horsepower_model'] = horsepower_model.evaluate(
    test_features['Horsepower'],
    test_labels,
    verbose=0
)

x = tf.linspace(0.0,250,251)
y = horsepower_model.predict(x)

def plot_horsepower(x,y):
    plt.scatter(train_features['Horsepower'],train_labels,label='Data')
    plt.plot(x,y,color='k',label='Predictions')
    plt.xlabel('Horsepower')
    plt.ylabel('MPG')
    plt.legend()

plot_horsepower(x,y)

linear_model = tf.keras.Sequential([
    normalizer,
    layers.Dense(units=1)
])
linear_model.summary()

linear_model.compile(
    optimizer=tf.optimizers.Adam(learning_rate=0.1),
    loss='mean_absolute_error'
)

# Commented out IPython magic to ensure Python compatibility.
# %%time
# history = linear_model.fit(
#     train_features,
#     train_labels,
#     epochs=100,
#     verbose=0,
#     validation_split=0.2
# )

plot_loss(history)

test_result['linear_model'] = linear_model.evaluate(
    test_features,
    test_labels,
    verbose=0
)

#regresja z głędoką siecią neuronową DNN
def build_and_compile(norm):
    model = keras.Sequential([
        norm,
        layers.Dense(64,activation='relu'),
        layers.Dense(64,activation='relu'),
        layers.Dense(1)
    ])
    model.compile(loss='mean_absolute_error',optimizer=tf.keras.optimizers.Adam(0.001))
    return model

#regresja z użyciem DNN i pojedynczego wejścia
dnn_horsepower_model = build_and_compile(horsepower_normalizer)

dnn_horsepower_model.summary()

# Commented out IPython magic to ensure Python compatibility.
# %%time
# history = dnn_horsepower_model.fit(
#     train_features['Horsepower'],
#     train_labels,
#     epochs=100,
#     verbose=0,
#     validation_split=0.2
# )

plot_loss(history)

test_result['dnn_horsepower_model'] = dnn_horsepower_model.evaluate(
    test_features['Horsepower'],
    test_labels,
    verbose=0
)

x = tf.linspace(0.0,250,251)
y = dnn_horsepower_model.predict(x)
plot_horsepower(x,y)

#regresja przy użyciu dnn i wielu danych wejściowych
dnn_model = build_and_compile(normalizer)
dnn_model.summary()

# Commented out IPython magic to ensure Python compatibility.
# %%time
# history = dnn_model.fit(
#     train_features,
#     train_labels,
#     epochs=100,
#     verbose=0,
#     validation_split=0.2
# )

plot_loss(history)

test_result['dnn_model'] = dnn_model.evaluate(
    test_features,
    test_labels,
    verbose=0
)

#regresja z głędoką siecią neuronową DNN
def build_and_compile_biggest(norm):
    model = keras.Sequential([
        norm,
        layers.Dense(128,activation='relu'),
        layers.Dense(512,activation='relu'),
        layers.Dense(512,activation='relu'),
        layers.Dense(64,activation='relu'),
        layers.Dense(1)
    ])
    model.compile(loss='mean_absolute_error',optimizer=tf.keras.optimizers.Adam(0.001))
    return model

#regresja przy użyciu dnn - z większą ilością warstw i wielu danych wejściowych
dnn_model_big = build_and_compile_biggest(normalizer)
dnn_model_big.summary()

# Commented out IPython magic to ensure Python compatibility.
# %%time
# history = dnn_model_big.fit(
#     train_features,
#     train_labels,
#     epochs=100,
#     verbose=0,
#     validation_split=0.2
# )

plot_loss(history)

test_result['dnn_model_big'] = dnn_model_big.evaluate(
    test_features,
    test_labels,
    verbose=0
)

pd.DataFrame(test_result,index=['Mean absolute Error [MPG]']).T